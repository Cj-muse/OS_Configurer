#!/bin/bash

<<COMMENT
Author: 
	Conner Mattingly

Description: 
	This script is designed to install an ubuntu based operating system with 
	desired software packages and setup various OS configurations as preferred.

Edit History: 
	DEC 20th 2019 [Initial creation of script. Header created.]	
	DEC 24th 2019 [Added packages to config. Created Error message for bad 
		config file]
	DEC 29th 2019 [Changes tabs to 2 spaces. Added os_update, get_os_and_version,
    and install_packages function stubs. In the middle of concatenating an 
    update command ]
  DEC 31st 2019 [Created error and warning tracking arrays. Created output 
  method for message arrays. Executed a concatenated update command]
  JAN 1st 2020 [Happy New Year! Introduced EXIT_STATUS. Removed unneccessary 
    command substitution in update_os. Tweaked output_message_array. Added the
    semi finished stub of upgrade_os.]
  JAN 4th 2020 [Created the if_error function. I think I like it... Made some
    other tweaks to package manager install/update commands. Also, script is 
    now outputing the error and warning arrays correctly.]

Resources: (See tabs for continued links)
  https://www.tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html
  https://google.github.io/styleguide/shell.xml
  https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Command-
    Substitution
  
COMMENT

################################################################################
# Global Variables #############################################################
################################################################################

# Configurations and global variables... 
PACKAGE_CONFIG=packages.config
PACKAGE_MANAGER="apt"
PACKAGE_MANAGER_INSTALL_COMMAND=
PACKAGE_MANAGER_INSTALL_OPTIONS=
PACKAGE_MANAGER_UPDATE_COMMAND=
PACKAGE_MANAGER_UPGRADE_COMMAND=
OS=
VER=
#_test_command_execution

# Errors
EXIT_STATUS=0
BAD_CONFIG_FILE_EXCEPTION_MESSAGE=$(cat << EndOfMessage 
ERROR: Either missing package configuration file or file is not a regular file.
File: ${_package_config_filename}
EndOfMessage
)
ERROR_ARRAY=()
WARNING_ARRAY=()
RED='\033[0;31m'
YELLOW='\033[1;33m'
NO_COLOR='\033[0m'

################################################################################
# Function Definitions #########################################################
################################################################################
# TODO: Extract logging utilities into a new script.

# This function checks to see if the imediatly preceding command failed or not.
# This function MUST be called directly after the command you would
# like to check the result of.
# Arg 1: Output message if preceding command failed (Non-zero exit code)
# Arg 2: Output message if preceding command succeeded (0 exit code)
# Returns: 1 if preceding command failed or 0 otherwise.
function if_error() {
  exit_value=$?
  error_message=$1
  success_message=$2
  if [[ $exit_value -ne 0 ]]; then
    if [[ -z "${error_message/}" ]]; then
      error "No message provided... Exit status: $exit_value"
    else
      error "${error_message} Exit status: $exit_value"
    fi
    return 1
  else # On Success
    if [[ -n "${success_message/}" ]]; then
      echo "${success_message}"
    fi
    return 0
  fi
}

function error() {
  error_string="${RED}ERROR: ${1}${NO_COLOR}"
  echo -e $error_string
  ERROR_ARRAY+=("$error_string")
  if [[ $EXIT_STATUS -eq 0 ]]; then
    EXIT_STATUS=1
  fi
}

function warning() {
  warning_string="${YELLOW}WARNING: ${1}${NO_COLOR}"
  echo -e $warning_string
  WARNING_ARRAY+=("$warning_string")
}

function output_message_array() {
  message_array=("$@")
  for message in "${message_array[@]}"; do
    if [[ $message ]]; then
      echo -e ${message}
    fi
  done
}

function verify_params() {
	if [[ ! -f $PACKAGE_CONFIG  ]]; then	
		echo "$BAD_CONFIG_FILE_EXCEPTION_MESSAGE"
		echo "Exiting."
		exit 1
	fi
}

# This function gets the OS and Version depending on which OS files it has
# Taken from https://unix.stackexchange.com/questions/6345/how-can-i-get-distribution-name-and-version-number-in-a-simple-shell-script
function get_os_and_version() {
  echo "Getting OS and Version information."

  if [[ -f /etc/os-release ]]; then
    # freedesktop.org and systemd
    . /etc/os-release
    OS=$NAME
    VER=$VERSION_ID
  fi

  echo "OS=${OS}"
  echo "VER=${VER}"
}

function set_package_manager() {
  echo "Setting Package Manager."
	
  case $OS in
    "Linux Mint" )
      echo "The OS is Linux Mint"
      echo "Version=${VER}"
      PACKAGE_MANAGER="apt-get "
      PACKAGE_MANAGER_INSTALL_COMMAND="install"
      PACKAGE_MANAGER_INSTALL_OPTIONS="-y "
      PACKAGE_MANAGER_UPDATE_COMMAND="update"
      PACKAGE_MANAGER_UPGRADE_COMMAND="upgrade"
      ;;
    * )
      echo "OS Uknown"
      echo "Exiting"
      exit 1
      ;;
  esac

  echo "Package manager set to: ${PACKAGE_MANAGER}"
}

# run package manager update 
function update_os() {
  echo "Updating OS..."
  update_cmd="sudo "
  update_cmd+=$PACKAGE_MANAGER
  update_cmd+=$PACKAGE_MANAGER_UPDATE_COMMAND

  # TODO:  Should Eval be used or NAH
  # This says yay: https://askubuntu.com/questions/476523/build-command-by-concatenating-string-in-bash
  # This says Nay: https://google.github.io/styleguide/shell.xml
  echo "Executing command: [$update_cmd]"
  eval $update_cmd
  if_error  "Error updating OS. Command: [$update_cmd]. "

  echo "Update successfull"  
}

function upgrade_os() {
   echo "Upgrading OS..."

  # TODO:  Should Eval be used or NAH
  # This says yay: https://askubuntu.com/questions/476523/build-command-by-concatenating-string-in-bash
  # This says Nay: https://google.github.io/styleguide/shell.xml
  upgrade_cmd="sudo "
  upgrade_cmd+=$PACKAGE_MANAGER
  upgrade_cmd+=$PACKAGE_MANAGER_UPGRADE_COMMAND
  echo "Executing command: [$upgrade_cmd]"
  success="Upgrade successfull" 
  failure="Error upgrading OS. Command: [$upgrade_cmd]. " 
  eval $upgrade_cmd
  if_error $failure $success
}

function install_packages() {
  echo "Installing packages..."

  install_cmd="sudo "
  install_cmd+=$PACKAGE_MANAGER
  install_cmd+=$PACKAGE_MANAGER_INSTALL_OPTIONS
  install_cmd+=$PACKAGE_MANAGER_INSTALL_COMMAND
  echo "Executing command: [$install_cmd]"

  while read package; do
    # Check to insure package string is not just whitespace 
    # ${parameter/pattern/string}
    # url below is continued on the second line. Please concatenate
    # https://www.gnu.org/savannah-checkouts/gnu/bash/manual
    #/bash.html#Shell-Parameter-Expansion
    if [[ -n "${package/}" ]]; then
      echo "installing $package"
      failure_message="Error executing command: [$install_cmd $package]."
      eval $install_cmd $package
      if_error $failure_message
    fi
  done < $PACKAGE_CONFIG
}

################################################################################
# Main Script ##################################################################
################################################################################
function main(){
  echo "Running OS Configurer."
  verify_params
  get_os_and_version
  set_package_manager
#<<COMMENT  
  update_os
  upgrade_os
#COMMENT


  install_packages  

  # Finish up
  echo "========================================================================="
  output_message_array "${WARNING_ARRAY[@]}"
  output_message_array "${ERROR_ARRAY[@]}"
  echo "========================================================================="  
  echo "Finished configuring your OS. Thank you for using the configurer!"
  echo "Till next time..."

  echo "exit: $EXIT_STATUS"
  exit $EXIT_STATUS
}

# Run
main